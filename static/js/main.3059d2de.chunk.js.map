{"version":3,"sources":["Constants.js","ConversionService.js","Modal.js","Disclaimer.js","Converter.js","App.js","index.js"],"names":["Constants","ACCESS_KEY","ENDPOINT","SYMBOLS","ConversionService","getExchangeRates","req","axios","get","Modal","children","elRef","useRef","current","div","document","createElement","useEffect","modalRoot","getElementById","appendChild","removeChild","createPortal","Disclaimer","props","toggleModal","setState","showModal","state","className","onClick","this","Component","Converter","handleApiError","err","msg","showError","errorMsg","console","error","convertCurrency","inputCurr","outputCurr","amount","inputRate","exchangeRates","result","toFixed","outputAmount","setInput","value","inputAmount","setInputCurrency","inputCurrency","currencyUpdateHandler","setOutputCurrency","outputCurrency","updateOutputAmount","isInputValid","parseFloat","currencyOptions","CAD","USD","EUR","then","res","log","data","rates","input","isValid","isNaN","Number","onSubmit","event","preventDefault","htmlFor","id","placeholder","onChange","target","onBlur","map","item","key","readOnly","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.3059d2de.chunk.js","sourcesContent":["const Constants = {\n    ACCESS_KEY: 'eb192050420a2d203c868dd115ff6174',\n    ENDPOINT: 'http://data.fixer.io/api/latest',\n    SYMBOLS: 'CAD,USD,EUR'\n};\n\nexport default Constants;","import axios from 'axios';\nimport Constants from './Constants';\n\nconst ConversionService = {\n    getExchangeRates() {\n        const req = `${Constants.ENDPOINT}?access_key=${Constants.ACCESS_KEY}&symbols=${Constants.SYMBOLS}`;\n        return axios.get(req);\n    }\n};\n\nexport default ConversionService;","import React, { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nconst Modal = ({ children }) => {\n  const elRef = useRef(null);\n  if (!elRef.current) {\n    const div = document.createElement('div');\n    elRef.current = div;\n  }\n\n  useEffect(() => {\n    const modalRoot = document.getElementById('modal');\n    modalRoot.appendChild(elRef.current);\n    return () => modalRoot.removeChild(elRef.current);\n  }, []);\n\n  return createPortal(<div>{children}</div>, elRef.current);\n};\n\nexport default Modal;","import React, {Component} from 'react';\nimport Modal from './Modal';\n\nclass Disclaimer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          showModal: false\n        };\n    }\n\n    toggleModal = () => {\n        this.setState({\n          showModal: !this.state.showModal\n        });\n      }\n\n    render() {\n        return (\n            <div className=\"disclaimer-parent\">\n                <button \n                    className=\"disclaimer\"\n                    onClick={this.toggleModal}\n                >\n                    Disclaimer\n                </button>\n                {\n                    this.state.showModal ? (\n                        <Modal>\n                            <div>\n                                <h2 className=\"disclaimer-heading\">Where is the data coming from?</h2>\n                                <p className=\"disclaimer-text\">\n                                    Exchange rate data delivered by the Fixer API is collected from over 15 reliable data sources,\n                                    every minute. Sources include banks and financial data providers.\n                                </p>\n                                <button className=\"disclaimer-button\" onClick={this.toggleModal}>OK</button>\n                            </div>\n                        </Modal>\n                    ) : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Disclaimer;","import React, { Component } from 'react';\nimport ConversionService from './ConversionService';\nimport Disclaimer from './Disclaimer';\n\nclass Converter extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputAmount: '',\n            inputCurrency: 'CAD',\n            outputAmount: '',\n            outputCurrency: 'USD',\n            currencyOptions: [\n                'CAD',\n                'USD',\n                'EUR'\n            ],\n            exchangeRates: {\n                CAD: 1,\n                USD: 1,\n                EUR: 1\n            },\n            showError: false,\n            errorMsg: ''\n        };\n    }\n\n    /**\n     * get the latest exchange rates and update them in state\n     * using componentDidMount as we only need to do this once\n     * and not on every input change\n     */\n    componentDidMount() {\n        ConversionService.getExchangeRates()\n            .then((res) => {\n                console.log(res);\n                if(res.data && res.data.rates) {\n                    const rates = res.data.rates;\n                    this.setState({\n                        exchangeRates: {\n                            CAD: rates.CAD,\n                            USD: rates.USD,\n                            EUR: rates.EUR\n                        },\n                        showError: false\n                    });\n                }\n                else {\n                    this.handleApiError('Could not fetch data')\n                }\n            }, (err) => this.handleApiError(err));\n    }\n\n    handleApiError= (err) => {\n        const msg = err ? err : 'Error fetching data';\n        this.setState({\n            showError: true,\n            errorMsg: msg\n        });\n        console.error(msg);\n    }\n\n    /**\n     * performs the currency conversion\n     * @param inputCurr the input currency string like 'CAD'\n     * @param outputCurr the output currency string like 'USD'\n     * @param amount the amount that needs to be converted like 25\n     * will update state.outputAmount with the result\n     */\n    convertCurrency = (inputCurr, outputCurr, amount) => {\n        if (amount > 0) {\n            const inputRate = this.state.exchangeRates[inputCurr];\n            const outputRate = this.state.exchangeRates[outputCurr];\n            const result = ((outputRate / inputRate) * amount).toFixed(2);\n            this.setState({\n                outputAmount: result,\n                showError: false\n            });\n        } else {\n            this.setState({\n                errorMsg: 'amount cannot be 0',\n                showError: true\n            });\n        }\n    }\n\n    setInput = (value) => {\n        this.setState({\n            inputAmount: value\n        });\n    }\n\n    /**\n     * call convertCurrency when currency slection is updated\n     */\n    currencyUpdateHandler() {\n        this.convertCurrency(this.state.inputCurrency, this.state.outputCurrency, this.state.inputAmount);\n    }\n\n    setInputCurrency = (value) => {\n        this.setState(\n            {\n                inputCurrency: value\n            },\n            this.currencyUpdateHandler\n        );\n    }\n\n    setOutputCurrency = (value) => {\n        this.setState(\n            {\n                outputCurrency: value\n            },\n            this.currencyUpdateHandler\n        );\n    }\n\n    updateOutputAmount = (amount) => {\n        if (this.isInputValid(amount)) {\n            amount = parseFloat(amount);\n            this.convertCurrency(this.state.inputCurrency, this.state.outputCurrency, amount);\n        }\n    }\n\n    /**\n     * @param {*} input the text input value\n     * validates the input\n     * @returns true if valid, false otherwise\n     * if false, sets state.showError and state.errorMsg\n     */\n    isInputValid(input) {\n        let isValid = true;\n        if (isNaN(Number(input))) {\n            this.setState({\n                showError: true,\n                errorMsg: 'Please input a number and try again.'\n            });\n            isValid = false;\n        }\n        else if (Number(input) < 0 ) {\n            this.setState({\n                showError: true,\n                errorMsg: 'No negative values allowed. Try again.'\n            });\n            isValid = false;\n        }\n        return isValid;\n    }\n    \n    render() {\n        return (\n            <div className=\"converter\">\n                <h2>Currency Converter</h2>\n                <form className=\"converter-form\" onSubmit={event => event.preventDefault()}>\n                    <label className=\"converter-from__label\" htmlFor=\"inputAmount\">\n                        <h4>Type in amount and select currency:</h4>\n                        <input\n                            id=\"inputAmount\"\n                            className=\"converter-form__input\"\n                            placeholder=\"0.00\"\n                            value={this.state.inputAmount}\n                            onChange={event => this.setInput(event.target.value)}\n                            onBlur={event => this.updateOutputAmount(event.target.value)}\n\n                        />\n                    </label>\n                    <label className=\"converter-from__label\" htmlFor=\"inputCurrency\">\n                        <select\n                            id=\"inputCurrency\"\n                            className=\"converter-form__select\"\n                            value={this.state.inputCurrency}\n                            onChange={event => this.setInputCurrency(event.target.value)}\n                            onBlur={event => this.setInputCurrency(event.target.value)}\n                        >\n                        {\n                            this.state.currencyOptions\n                                .map(item => <option value={item} key={item}>{item}</option>)\n                        }\n                        </select>\n                    </label>\n                </form>\n                {\n                    this.state.showError ? (\n                        <div className=\"error\">\n                            {this.state.errorMsg}\n                        </div>\n                    )\n                    : null\n                }\n                <form className=\"converter-form\" onSubmit={event => event.preventDefault()}>\n                    <label className=\"converter-from__label\" htmlFor=\"outputAmount\">\n                        <h4>Converted amount:</h4>\n                        <input\n                            id=\"outputAmount\"\n                            className=\"converter-form__input\"\n                            placeholder=\"0.00\"\n                            value={this.state.outputAmount}\n                            readOnly={true}\n                        />\n                    </label>\n                    <label className=\"converter-from__label\" htmlFor=\"outputCurrency\">\n                        <select\n                            id=\"outputCurrency\"\n                            className=\"converter-form__select\"\n                            value={this.state.outputCurrency}\n                            onChange={event => this.setOutputCurrency(event.target.value)}\n                            onBlur={event => this.setOutputCurrency(event.target.value)}\n                        >\n                        {\n                            this.state.currencyOptions\n                                .map(item => <option value={item} key={item}>{item}</option>)\n                        }\n                        </select>\n                    </label>\n                </form>\n                <Disclaimer />\n            </div>\n        );\n    }\n}\n\nexport default Converter;","import React from 'react';\nimport './App.css';\nimport Converter from './Converter';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Converter />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}